{"code":"import { mainWindow } from \"../common/dom/get_main_window\";\r\nimport { closeDialog, showDialog, } from \"../dialogs/make-dialog-manager\";\r\nconst DEBUG = false;\r\n// eslint-disable-next-line import/no-mutable-exports\r\nexport let historyPromise;\r\nlet historyResolve;\r\nexport const urlSyncMixin = (superClass) => \r\n// Disable this functionality in the demo.\r\n__DEMO__\r\n    ? superClass\r\n    : class extends superClass {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._ignoreNextPopState = false;\r\n            this._dialogClosedListener = (ev) => {\r\n                var _a, _b, _c, _d;\r\n                if (DEBUG) {\r\n                    console.log(\"dialog closed\", ev.detail.dialog);\r\n                    console.log(\"open\", (_a = mainWindow.history.state) === null || _a === void 0 ? void 0 : _a.open, \"dialog\", (_b = mainWindow.history.state) === null || _b === void 0 ? void 0 : _b.dialog);\r\n                }\r\n                // If not closed by navigating back, and not a new dialog is open, remove the open state from history\r\n                if (((_c = mainWindow.history.state) === null || _c === void 0 ? void 0 : _c.open) &&\r\n                    ((_d = mainWindow.history.state) === null || _d === void 0 ? void 0 : _d.dialog) === ev.detail.dialog) {\r\n                    if (DEBUG) {\r\n                        console.log(\"remove state\", ev.detail.dialog);\r\n                    }\r\n                    if (history.length) {\r\n                        this._ignoreNextPopState = true;\r\n                        historyPromise = new Promise((resolve) => {\r\n                            historyResolve = () => {\r\n                                resolve();\r\n                                historyResolve = undefined;\r\n                                historyPromise = undefined;\r\n                            };\r\n                            mainWindow.history.back();\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            this._popstateChangeListener = (ev) => {\r\n                var _a, _b, _c, _d;\r\n                if (this._ignoreNextPopState) {\r\n                    if (history.length &&\r\n                        (((_b = (_a = ev.state) === null || _a === void 0 ? void 0 : _a.oldState) === null || _b === void 0 ? void 0 : _b.replaced) ||\r\n                            ((_d = (_c = ev.state) === null || _c === void 0 ? void 0 : _c.oldState) === null || _d === void 0 ? void 0 : _d.dialogParams) === null)) {\r\n                        // if the previous dialog was replaced, or we could not copy the params, and the current dialog is closed, we should also remove the previous dialog from history\r\n                        if (DEBUG) {\r\n                            console.log(\"remove old state\", ev.state.oldState);\r\n                        }\r\n                        mainWindow.history.back();\r\n                        return;\r\n                    }\r\n                    if (DEBUG) {\r\n                        console.log(\"ignore popstate\");\r\n                    }\r\n                    this._ignoreNextPopState = false;\r\n                    if (historyResolve) {\r\n                        historyResolve();\r\n                    }\r\n                    return;\r\n                }\r\n                if (ev.state && \"dialog\" in ev.state) {\r\n                    if (DEBUG) {\r\n                        console.log(\"popstate\", ev);\r\n                    }\r\n                    this._handleDialogStateChange(ev.state);\r\n                }\r\n                if (historyResolve) {\r\n                    historyResolve();\r\n                }\r\n            };\r\n        }\r\n        connectedCallback() {\r\n            super.connectedCallback();\r\n            if (history.length === 1) {\r\n                history.replaceState(Object.assign(Object.assign({}, history.state), { root: true }), \"\");\r\n            }\r\n            mainWindow.addEventListener(\"popstate\", this._popstateChangeListener);\r\n            this.addEventListener(\"dialog-closed\", this._dialogClosedListener);\r\n        }\r\n        disconnectedCallback() {\r\n            super.disconnectedCallback();\r\n            mainWindow.removeEventListener(\"popstate\", this._popstateChangeListener);\r\n            this.removeEventListener(\"dialog-closed\", this._dialogClosedListener);\r\n        }\r\n        async _handleDialogStateChange(state) {\r\n            if (DEBUG) {\r\n                console.log(\"handle state\", state);\r\n            }\r\n            if (!state.open) {\r\n                const closed = await closeDialog(state.dialog);\r\n                if (!closed) {\r\n                    if (DEBUG) {\r\n                        console.log(\"dialog could not be closed\");\r\n                    }\r\n                    // dialog could not be closed, push state again\r\n                    mainWindow.history.pushState({\r\n                        dialog: state.dialog,\r\n                        open: true,\r\n                        dialogParams: null,\r\n                        oldState: null,\r\n                    }, \"\");\r\n                    return;\r\n                }\r\n                if (state.oldState) {\r\n                    if (DEBUG) {\r\n                        console.log(\"handle old state\");\r\n                    }\r\n                    this._handleDialogStateChange(state.oldState);\r\n                }\r\n                return;\r\n            }\r\n            if (state.dialogParams !== null) {\r\n                showDialog(this, this.shadowRoot, state.dialog, state.dialogParams);\r\n            }\r\n        }\r\n    };\r\n","references":["/workspaces/RacelandHA/config/www/raceland-dashboard/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/www/raceland-dashboard/src/frontend_release/common/dom/fire_event.ts","/workspaces/RacelandHA/config/www/raceland-dashboard/src/frontend_release/common/dom/get_main_window.ts","/workspaces/RacelandHA/config/www/raceland-dashboard/src/frontend_release/dialogs/make-dialog-manager.ts","/workspaces/RacelandHA/config/www/raceland-dashboard/src/frontend_release/mixins/provide-hass-lit-mixin.ts","/workspaces/RacelandHA/config/www/raceland-dashboard/src/frontend_release/types.ts"]}
