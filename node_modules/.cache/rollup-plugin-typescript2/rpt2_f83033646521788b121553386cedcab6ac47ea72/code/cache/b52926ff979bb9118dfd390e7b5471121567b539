{"code":"import { mainWindow } from \"../common/dom/get_main_window\";\r\nconst LOADED = {};\r\nexport const showDialog = async (element, root, dialogTag, dialogParams, dialogImport, addHistory = true) => {\r\n    var _a, _b;\r\n    if (!(dialogTag in LOADED)) {\r\n        if (!dialogImport) {\r\n            if (__DEV__) {\r\n                // eslint-disable-next-line\r\n                console.warn(\"Asked to show dialog that's not loaded and can't be imported\");\r\n            }\r\n            return;\r\n        }\r\n        LOADED[dialogTag] = dialogImport().then(() => {\r\n            const dialogEl = document.createElement(dialogTag);\r\n            element.provideHass(dialogEl);\r\n            return dialogEl;\r\n        });\r\n    }\r\n    if (addHistory) {\r\n        mainWindow.history.replaceState({\r\n            dialog: dialogTag,\r\n            open: false,\r\n            oldState: ((_a = mainWindow.history.state) === null || _a === void 0 ? void 0 : _a.open) &&\r\n                ((_b = mainWindow.history.state) === null || _b === void 0 ? void 0 : _b.dialog) !== dialogTag\r\n                ? mainWindow.history.state\r\n                : null,\r\n        }, \"\");\r\n        try {\r\n            mainWindow.history.pushState({ dialog: dialogTag, dialogParams: dialogParams, open: true }, \"\");\r\n        }\r\n        catch (err) {\r\n            // dialogParams could not be cloned, probably contains callback\r\n            mainWindow.history.pushState({ dialog: dialogTag, dialogParams: null, open: true }, \"\");\r\n        }\r\n    }\r\n    const dialogElement = await LOADED[dialogTag];\r\n    // Append it again so it's the last element in the root,\r\n    // so it's guaranteed to be on top of the other elements\r\n    root.appendChild(dialogElement);\r\n    dialogElement.showDialog(dialogParams);\r\n};\r\nexport const replaceDialog = () => {\r\n    mainWindow.history.replaceState(Object.assign(Object.assign({}, mainWindow.history.state), { replaced: true }), \"\");\r\n};\r\nexport const closeDialog = async (dialogTag) => {\r\n    if (!(dialogTag in LOADED)) {\r\n        return true;\r\n    }\r\n    const dialogElement = await LOADED[dialogTag];\r\n    if (dialogElement.closeDialog) {\r\n        return dialogElement.closeDialog() !== false;\r\n    }\r\n    return true;\r\n};\r\nexport const makeDialogManager = (element, root) => {\r\n    element.addEventListener(\"show-dialog\", (e) => {\r\n        const { dialogTag, dialogImport, dialogParams, addHistory } = e.detail;\r\n        showDialog(element, root, dialogTag, dialogParams, dialogImport, addHistory);\r\n    });\r\n};\r\n","references":["/workspaces/RacelandHA/config/www/raceland-dashboard/src/frontend_release/common/dom/fire_event.ts","/workspaces/RacelandHA/config/www/raceland-dashboard/src/frontend_release/common/dom/get_main_window.ts","/workspaces/RacelandHA/config/www/raceland-dashboard/src/frontend_release/mixins/provide-hass-lit-mixin.ts"]}
