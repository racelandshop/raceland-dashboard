{"code":"// Polymer legacy event helpers used courtesy of the Polymer project.\r\n//\r\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n//    * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n/**\r\n * Dispatches a custom event with an optional detail value.\r\n *\r\n * @param {string} type Name of event type.\r\n * @param {*=} detail Detail value containing event-specific\r\n *   payload.\r\n * @param {{ bubbles: (boolean|undefined),\r\n *           cancelable: (boolean|undefined),\r\n *           composed: (boolean|undefined) }=}\r\n *  options Object specifying options.  These may include:\r\n *  `bubbles` (boolean, defaults to `true`),\r\n *  `cancelable` (boolean, defaults to false), and\r\n *  `node` on which to fire the event (HTMLElement, defaults to `this`).\r\n * @return {Event} The new event that was fired.\r\n */\r\nexport const fireEvent = (node, type, detail, options) => {\r\n    options = options || {};\r\n    // @ts-ignore\r\n    detail = detail === null || detail === undefined ? {} : detail;\r\n    const event = new Event(type, {\r\n        bubbles: options.bubbles === undefined ? true : options.bubbles,\r\n        cancelable: Boolean(options.cancelable),\r\n        composed: options.composed === undefined ? true : options.composed,\r\n    });\r\n    event.detail = detail;\r\n    node.dispatchEvent(event);\r\n    return event;\r\n};\r\n","references":[]}
